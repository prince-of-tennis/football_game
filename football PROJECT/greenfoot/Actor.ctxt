#BlueJ class context
comment0.target=Actor()
comment0.text=\nConstruct\ an\ Actor.\nThe\ object\ will\ have\ a\ default\ image.\n\n\n
comment1.target=void\ act()
comment1.text=\nThe\ act\ method\ is\ called\ by\ the\ greenfoot\ framework\ to\ give\ objects\ a\nchance\ to\ perform\ some\ action.\ At\ each\ action\ step\ in\ the\ environment,\neach\ object's\ act\ method\ is\ invoked,\ in\ unspecified\ order.\n\nThis\ method\ does\ nothing.\ It\ should\ be\ overridden\ in\ subclasses\ to\nimplement\ an\ object's\ action.\n\n
comment10.target=World\ getWorld()
comment10.text=\nReturn\ the\ world\ that\ this\ object\ lives\ in.\n\n@return\ The\ world.\n\n
comment11.params=world
comment11.target=void\ addedToWorld(World)
comment11.text=\nThis\ method\ will\ be\ called\ by\ the\ Greenfoot\ system\ when\ the\ object\ has\nbeen\ inserted\ into\ the\ world.\ This\ method\ can\ be\ overridden\ to\ implement\ncustom\ behavoiur\ when\ the\ actor\ is\ inserted\ into\ the\ world.\n<p>\nThis\ default\ implementation\ is\ empty.\n\n@param\ world\ The\ world\ the\ object\ was\ added\ to.\n\n
comment12.target=GreenfootImage\ getImage()
comment12.text=\nReturns\ the\ image\ used\ to\ represent\ this\ Actor.\ This\ image\ can\ be\ \nmodified\ to\ change\ the\ object's\ appearance.\ \n\n@return\ The\ object's\ image.\n\n
comment13.params=filename
comment13.target=void\ setImage(String)
comment13.text=\nSet\ an\ image\ for\ this\ object\ from\ an\ image\ file.\ The\ file\ may\ be\ in\njpeg,\ gif\ or\ png\ format.\ The\ file\ should\ be\ located\ in\ the\ project\ndirectory.\n\n@param\ filename\ The\ name\ of\ the\ image\ file.\n@throws\ IllegalArgumentException\ If\ the\ image\ can\ not\ be\ loaded.\n\n
comment14.params=image
comment14.target=void\ setImage(GreenfootImage)
comment14.text=\nSet\ the\ image\ for\ this\ object\ to\ the\ specified\ image.\n\n@see\ \#setImage(String)\n@param\ image\ The\ image.\n\n
comment15.params=x\ y
comment15.target=void\ setLocationInPixels(int,\ int)
comment15.text=\n\nTranslates\ the\ given\ location\ into\ cell-coordinates\ before\ setting\ the\nlocation.\n\nUsed\ by\ the\ WorldHandler\ to\ drag\ objects.\n\n@param\ x\ x-coordinate\ in\ pixels\n@param\ y\ y-coordinate\ in\ pixels\n\n
comment16.params=world
comment16.target=void\ setWorld(World)
comment16.text=\nSets\ the\ world\ of\ this\ actor.\n\n@param\ world\n\n
comment17.params=x\ y\ world
comment17.target=void\ addToWorld(int,\ int,\ World)
comment17.text=\nAdds\ this\ object\ to\ a\ world\ at\ the\ given\ coordinate.\n\n
comment18.target=Circle\ getBoundingCircle()
comment18.text=\nGet\ the\ bounding\ circle\ of\ the\ object.\ Taking\ into\ consideration\ that\ the\nobject\ can\ rotate.\n\n\n
comment19.target=Rect\ getBoundingRect()
comment19.text=\nGet\ the\ bounding\ rectangle\ of\ the\ object.\ Taking\ into\ consideration\ that\ the\nobject\ can\ rotate.\ \n\n@return\ A\ new\ Rect\ specified\ in\ pixels\!\n\n
comment2.target=int\ getX()
comment2.text=\nReturn\ the\ x-coordinate\ of\ the\ object's\ current\ location.\ The\nvalue\ returned\ is\ the\ horizontal\ index\ of\ the\ object's\ cell\ in\ the\ world.\n\n@return\ The\ x-coordinate\ of\ the\ object's\ current\ location.\n@throws\ IllegalStateException\ If\ the\ actor\ has\ not\ been\ added\ into\ a\ world.\n\n
comment20.params=o
comment20.target=void\ setData(Object)
comment21.target=Object\ getData()
comment22.target=GreenfootImage\ getClassImage()
comment22.text=\nGet\ the\ default\ image\ for\ objects\ of\ this\ class.\ May\ return\ null.\n\n
comment23.params=i
comment23.target=int\ toCellFloor(int)
comment24.target=int\ getXMin()
comment24.text=\nGets\ the\ x-coordinate\ of\ the\ left\ most\ cell\ that\ is\ occupied\ by\ the\nobject.\n\n\n
comment25.target=int\ getXMax()
comment25.text=\nGets\ the\ x-coordinate\ of\ the\ right\ most\ cell\ that\ is\ occupied\ by\ the\nobject.\n\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment26.target=int\ getYMin()
comment26.text=\nGets\ the\ y-coordinate\ of\ the\ top\ most\ cell\ that\ is\ occupied\ by\ the\nobject.\n\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment27.target=int\ getYMax()
comment27.text=\nGets\ the\ y-coordinate\ of\ the\ bottom\ most\ cell\ that\ is\ occupied\ by\ the\nobject.\n\n\n
comment28.target=int\ getPaintX()
comment28.text=\nPixel\ location\ of\ the\ left\ of\ the\ image.\n\nRounds\ down\ if\ it\ does\ not\ result\ in\ an\ integer.\n\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment29.target=int\ getPaintY()
comment29.text=\nPixel\ location\ of\ the\ top\ of\ the\ image.\n\nRounds\ down\ if\ it\ does\ not\ result\ in\ an\ integer.\n\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment3.target=int\ getY()
comment3.text=\nReturn\ the\ y-coordinate\ of\ the\ object's\ current\ location.\ The\nvalue\ returned\ is\ the\ vertical\ index\ of\ the\ object's\ cell\ in\ the\ world.\n\n@return\ The\ y-coordinate\ of\ the\ object's\ current\ location\n@throws\ IllegalStateException\ If\ the\ actor\ has\ not\ been\ added\ into\ a\ world.\n\n
comment30.params=cell
comment30.target=double\ getCellCenter(int)
comment30.text=\nGets\ the\ center\ location\ of\ this\ cell\ (in\ pixels).\n\n@param\ X\ or\ Y\ coordinate\ of\ a\ cell\ to\ be\ translated\ into\ pixels.\n@returns\ location\ in\ pixels\ of\ the\ center\ of\ the\ cell.\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment31.target=void\ sizeChanged()
comment31.text=\nNotify\ the\ world\ that\ this\ object's\ size\ has\ changed,\ if\ it\ in\ fact\ has\ changed.\n\n\n
comment32.params=oldX\ oldY
comment32.target=void\ locationChanged(int,\ int)
comment32.text=\nNotify\ the\ world\ that\ this\ object's\ location\ has\ changed.\n\n\n
comment33.target=int\ calcBoundingRadius()
comment33.text=\nCalculate\ the\ bounding\ radius.\ In\ grid\ coordinates.\n\n
comment34.target=void\ failIfNotInWorld()
comment34.text=\nThrows\ an\ exception\ if\ the\ actor\ is\ not\ in\ a\ world.\n\n@throws\ IllegalStateException\ If\ not\ in\ world.\n\n
comment35.params=other
comment35.target=boolean\ intersects(Actor)
comment35.text=\nCheck\ whether\ this\ object\ intersects\ with\ another\ given\ object.\n\nNOTE\:\ Does\ not\ take\ rotation\ into\ consideration.\n\n@return\ True\ if\ the\ object's\ intersect,\ false\ otherwise.\n\n
comment36.params=distance\ diagonal\ cls
comment36.target=List\ getNeighbours(int,\ boolean,\ Class)
comment36.text=\nReturn\ the\ neighbours\ to\ this\ object\ within\ a\ given\ distance.\ This\nmethod\ considers\ only\ logical\ location,\ ignoring\ extent\ of\ the\ image.\nThus,\ it\ is\ most\ useful\ in\ scenarios\ where\ objects\ are\ contained\ in\ a\nsingle\ cell.\n<p>\n\nAll\ cells\ that\ can\ be\ reached\ in\ the\ number\ of\ steps\ given\ in\ 'distance'\nfrom\ this\ object\ are\ considered.\ Steps\ may\ be\ only\ in\ the\ four\ main\ndirections,\ or\ may\ include\ diagonal\ steps,\ depending\ on\ the\ 'diagonal'\nparameter.\ Thus,\ a\ distance/diagonal\ specification\ of\ (1,false)\ will\ninspect\ four\ cells,\ (1,true)\ will\ inspect\ eight\ cells.\n<p>\n\n@param\ distance\ Distance\ (in\ cells)\ in\ which\ to\ look\ for\ other\ objects.\n@param\ diagonal\ If\ true,\ include\ diagonal\ steps.\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\nobjects).\n@return\ A\ list\ of\ all\ neighbours\ found.\n\n
comment37.params=dx\ dy\ cls
comment37.target=List\ getObjectsAtOffset(int,\ int,\ Class)
comment37.text=\nReturn\ all\ objects\ that\ intersect\ the\ given\ location\ (relative\ to\ this\nobject's\ location).\ <br>\n\n@return\ List\ of\ objects\ at\ the\ given\ offset.\ The\ list\ will\ include\ this\nobject,\ if\ the\ offset\ is\ zero.\n@param\ dx\ X-coordinate\ relative\ to\ this\ objects\ location.\n@param\ dy\ y-coordinate\ relative\ to\ this\ objects\ location.\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\nobjects).\n\n
comment38.params=dx\ dy\ cls
comment38.target=Actor\ getOneObjectAtOffset(int,\ int,\ Class)
comment38.text=\nReturn\ one\ object\ that\ is\ located\ at\ the\ specified\ cell\ (relative\ to\ this\nobjects\ location).\ Objects\ found\ can\ be\ restricted\ to\ a\ specific\ class\n(and\ its\ subclasses)\ by\ supplying\ the\ 'cls'\ parameter.\ If\ more\ than\ one\nobject\ of\ the\ specified\ class\ resides\ at\ that\ location,\ one\ of\ them\ will\nbe\ chosen\ and\ returned.\n\n@param\ dx\ X-coordinate\ relative\ to\ this\ objects\ location.\n@param\ dy\ y-coordinate\ relative\ to\ this\ objects\ location.\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\ objects).\n@return\ An\ object\ at\ the\ given\ location,\ or\ null\ if\ none\ found.\n\n
comment39.params=r\ cls
comment39.target=List\ getObjectsInRange(int,\ Class)
comment39.text=\nReturn\ all\ objects\ within\ range\ 'r'\ around\ this\ object.\ \nAn\ object\ is\ within\ range\ if\ the\ distance\ between\ its\ centre\ and\ this\nobject's\ centre\ is\ less\ than\ or\ equal\ to\ r.\n\n@param\ r\ Radius\ of\ the\ cirle\ (in\ pixels)\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\ objects).\n\n
comment4.target=int\ getWidth()
comment4.text=\nReturn\ the\ width\ of\ the\ object.\ The\ width\ is\ the\ number\ of\ cells\nthat\ an\ object's\ image\ overlaps\ horizontally.\n\n@return\ The\ width\ of\ the\ object,\ or\ -1\ if\ it\ has\ no\ image.\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment40.params=cls
comment40.target=List\ getIntersectingObjects(Class)
comment40.text=\nReturn\ all\ the\ objects\ that\ intersect\ this\ object.\ This\ takes\ the\ngraphical\ extent\ of\ objects\ into\ consideration.\ <br>\n\nNOTE\:\ Does\ not\ take\ rotation\ into\ consideration.\n\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\ objects).\n\n
comment41.params=cls
comment41.target=Actor\ getOneIntersectingObject(Class)
comment41.text=\nReturn\ an\ object\ that\ intersects\ this\ object.\ This\ takes\ the\ngraphical\ extent\ of\ objects\ into\ consideration.\ <br>\n\nNOTE\:\ Does\ not\ take\ rotation\ into\ consideration.\n\n@param\ cls\ Class\ of\ objects\ to\ look\ for\ (passing\ 'null'\ will\ find\ all\ objects).\n\n
comment42.params=dx\ dy
comment42.target=boolean\ contains(int,\ int)
comment42.text=\nChecks\ whether\ the\ specified\ relative\ cell-location\ is\ considered\ to\ be\ninside\ this\ object.\n<p>\n\nA\ location\ is\ considered\ to\ be\ inside\ an\ object,\ if\ the\ object's\ image\noverlaps\ at\ least\ partially\ with\ that\ cell.\n<p>\n\nThis\ method\ is\ used\ by\ collision\ checking\ methods.\ Therefor,\ this\ method\ncan\ be\ overridden\ if,\ for\ example,\ other\ than\ rectangular\ image\ shapes\nshould\ be\ considered.\ <p>\n\nNOTE\:\ Does\ not\ take\ rotation\ into\ consideration.\ <br>\nNOTE\:\ No\ longer\ public,\nsince\ no\ scenarios\ have\ used\ it\ so\ far,\ and\ we\ might\ want\ to\ do\ it\nsligthly\ different\ if\ we\ want\ collision\ checkers\ to\ only\ do\ most\ of\ the\ncomputation\ once\ pr.\ act.\n\n@param\ dx\ The\ x-position\ relative\ to\ the\ location\ of\ the\ object\n@param\ dy\ The\ y-position\ relative\ to\ the\ location\ of\ the\ object\n@return\ True\ if\ the\ image\ contains\ the\ cell.\ If\ the\ object\ has\ no\ image,\nfalse\ will\ be\ returned.\n\n
comment43.params=x\ y\ rectX\ rectY\ rectWidth\ rectHeight
comment43.target=boolean\ intersects(int,\ int,\ int,\ int,\ int,\ int)
comment43.text=\nDetermines\ if\ the\ given\ position\ intersects\ with\ the\ rectangle.<br>\n\n\n
comment44.params=x1\ x2\ w1\ w2
comment44.target=boolean\ intersects(int,\ int,\ int,\ int)
comment44.text=\nDetermines\ if\ two\ lines\ intersects.\n\n\n
comment45.target=int\ getSequenceNumber()
comment45.text=\nGet\ the\ sequence\ number\ of\ this\ actor.\ This\ can\ be\ used\ as\ a\nhash\ value,\ which\ is\ not\ overridable\ by\ the\ user.\n\n
comment46.target=int\ getLastPaintSeqNum()
comment46.text=\nGet\ the\ sequence\ number\ of\ this\ actor\ from\ the\ last\ paint\ operation.\n(Returns\ whatever\ was\ set\ using\ the\ setLastPaintSeqNum\ method).\n\n
comment47.params=num
comment47.target=void\ setLastPaintSeqNum(int)
comment47.text=\nSet\ the\ sequence\ number\ of\ this\ actor\ from\ the\ last\ paint\ operation.\n\n
comment48.params=d
comment48.target=void\ setDelegate(ActorDelegate)
comment48.text=\nSet\ the\ object\ that\ this\ actor\ should\ delegate\ method\ calls\ to.\n\n\n
comment49.target=ActorDelegate\ getDelegate()
comment5.target=int\ getHeight()
comment5.text=\nReturn\ the\ height\ of\ the\ object.\ The\ height\ is\ the\ number\ of\ cells\nthat\ an\ object's\ image\ overlaps\ vertically.\n\n@return\ The\ height\ of\ the\ object,\ or\ -1\ if\ it\ has\ no\ image.\n@throws\ IllegalStateException\ If\ there\ is\ no\ world\ instantiated.\n\n
comment50.params=clazz
comment50.target=GreenfootImage\ getImage(Class)
comment50.text=\nGet\ the\ default\ image\ for\ objects\ of\ this\ class.\ May\ return\ null.\n\n
comment51.target=World\ getActiveWorld()
comment51.text=\nGet\ the\ active\ world.\ This\ method\ will\ return\ the\ instantiated\ world,\neven\ if\ the\ object\ is\ not\ yet\ added\ to\ a\ world.\n\n
comment52.target=Object\ getRemoteObjectTracker()
comment53.params=obj
comment53.target=void\ setTransportField(Object)
comment6.target=int\ getRotation()
comment6.text=\nReturn\ the\ current\ rotation\ of\ the\ object.\ Rotation\ is\ expressed\ as\ a\ degree\nvalue,\ range\ (0..359).\ Zero\ degrees\ is\ to\ the\ east.\ The\ angle\ increases\ \nclockwise.\n\n@see\ \#setRotation(int)\n\n@return\ The\ rotation\ in\ degrees.\n\n
comment7.params=rotation
comment7.target=void\ setRotation(int)
comment7.text=\nSet\ the\ rotation\ of\ the\ object.\ Rotation\ is\ expressed\ as\ a\ degree\nvalue,\ range\ (0..359).\ Zero\ degrees\ is\ to\ the\ east.\ The\ angle\ increases\ \nclockwise.\n\n@param\ rotation\ The\ rotation\ in\ degrees.\n\n
comment8.params=x\ y
comment8.target=void\ setLocation(int,\ int)
comment8.text=\nAssign\ a\ new\ location\ for\ this\ object.\ The\ location\ is\ specified\ as\ a\ cell\nindex\ in\ the\ world.\n\nIf\ this\ method\ is\ overridden\ it\ is\ important\ to\ call\ this\ method\ with\nsuper.setLocation(x,y)\ from\ the\ overriding\ method.\n\n@param\ x\ Location\ index\ on\ the\ x-axis\n@param\ y\ Location\ index\ on\ the\ y-axis\n@throws\ IllegalStateException\ If\ the\ actor\ has\ not\ been\ added\ into\ a\ world.\n\n
comment9.params=v\ limit
comment9.target=int\ limitValue(int,\ int)
comment9.text=\nLimits\ the\ value\ v\ to\ be\ less\ than\ limit\ and\ large\ or\ equal\ to\ zero.\n@return\n\n
numComments=54
